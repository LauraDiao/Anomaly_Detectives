import json,sys, os
from os import listdir

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

import warnings

warnings.filterwarnings("ignore")

sys.path.insert(0, 'src')
from helper import *
from eda import *
from train import *
from etl import *
from make_dir import init_

def data(transform_config, test_unseen, test_seen, is_test=False):
    # generating feat from unseen and seen data
    if is_test:
        readfilerun('data/test_data', 'data/temp/tempdata_r')
    else:
        readfilerun('data/raw/train_r', 'data/temp/tempdata_r')
    gen(test_seen, 'tempdata_r', **transform_config, window=25)
    readfilerun('data/raw/train_c', 'data/temp/tempdata_c')
    gen(test_unseen, 'tempdata_c', **transform_config, window=25)
    
    
def eda(eda_config, test_seen):
    # readfiledrun and gen for seen data, refer to data target
    
    main_eda(test_seen, [100, 500], **eda_config)
    print('EDA generated in the train and inference targets')

def clean():
    '''deletes all temporary files generated by other targets.'''
    
    temp_dirs = [
        "data/temp/tempdata_c", 
        "data/temp/tempdata_r", 
        'data/out',
        'outputs',
        'outputs/eda'
        'outputs/model'
    ]
    for dr_ in temp_dirs:
        for f in listdir(dr_): # should only remove files, not directories
            fname = os.path.join(dr_, f)
            if not os.path.isdir(fname):
                os.remove(fname)
    print('tempfiles cleaned')

def train(transform_config, eda_config, test_seen):
    # trains and tests in this target
    readfilerun('data/raw/train_r', 'data/temp/tempdata_r')
    gen(test_seen, 'tempdata_r', **transform_config)
            
    comb1 = getAllCombinations(1)
    comb2 = getAllCombinations(2)
    
    print("Testing on seen data: ")
    test_mse(test_seen, comb1, comb2)
    best_performance(test_seen)
    
    print('plotting seen data')
    main_eda(test_seen, [200, 300], **eda_config)
    print("EDA saved to outputs/eda/ folder")
    
def inference(transform_config, eda_config, test_unseen):
    # tests model on unseen data
    readfilerun('data/raw/train_c', 'data/temp/tempdata_c')
    gen(test_unseen, 'tempdata_c', **transform_config)
    
    comb1 = getAllCombinations(1)
    comb2 = getAllCombinations(2)
    
    print("Testing on unseen data: ")
    test_mse(test_unseen, comb1, comb2)
    best_performance(test_unseen)
    
    print('plotting unseen data')
    main_eda(test_unseen, [200, 300], **eda_config)
    print("EDA saved to outputs/eda/ folder")

def classify_(n_jobs, train_window, pca_components, test_size, classify, verbose):
    '''generates anomaly classification results'''
    
    model_eda()
    lossmodel = gen_model("loss", n_jobs, train_window, pca_components, test_size, verbose)
    latmodel = gen_model("latency", n_jobs, train_window, pca_components, test_size, verbose)
    lossp, latp = performance_metrics('data/temp/tempdata_c',lossmodel, latmodel, classify, transformed_dir=True, verbose=verbose)
    # saves classification metrics on test set
    lossp.to_csv('data/out/loss_model_test_metrics.csv')
    latp.to_csv('data/out/latency_model_test_metrics.csv') 
    lossp.mean().to_csv('data/out/loss_model_test_metrics_mean.csv')
    latp.mean().to_csv('data/out/latency_model_test_metric_mean.csv') 

def main(targets):
    init_() # generates directories

    transform_config = json.load(open('config/transform.json'))
    eda_config = json.load(open('config/eda.json'))
    mdl_config = json.load(open("config/model.json"))

    test_unseen = 'unseen'
    test_seen = 'seen'
    
    if 'clean' in targets:
        clean()
                    
    if 'data' in targets:
        data(**transform_config, test_unseen, test_seen)

    if 'eda' in targets:  
        eda(**eda_config, test_seen)

    if 'train' in targets:
        train(**transform_config, **eda_config, test_seen)

    if "inference" in targets: 
        inference(**transform_config, **eda_config, test_unseen)
    
    if "classify" in targets:
        classify_(**mdl_config)
        
    if "test" in targets: 
        # runs all targets on sample data
        data(**transform_config, test_unseen, test_seen, is_test=True) # runs on test dataset
        eda(**eda_config, test_seen)
        train(**transform_config, **eda_config, test_unseen)
        inference(**transform_config, **eda_config, test_unseen)
        classify_(**mdl_config)
        
    if 'all' in targets: 
        # runs all targets on all data
        data(**transform_config, test_unseen, test_seen)
        eda(**eda_config, test_seen)
        train(**transform_config, **eda_config, test_unseen)
        inference(**transform_config, **eda_config, test_unseen)
        classify_(**mdl_config)
        

if __name__ == '__main__':

    targets = sys.argv[1:]
    main(targets)
